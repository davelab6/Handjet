#----------------------------------------------------------------------------
# Main feature file

# Tables
include(tables.fea);


#----------------------------------------------------------------------------
# Language systems

languagesystem DFLT dflt;
languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn TRK;
languagesystem latn TAT;
languagesystem latn KAZ;


#----------------------------------------------------------------------------
# Classes


#----------------------------------------------------------------------------
# Features


#----------------------------------------------------------------------------
# Access all alternates

feature aalt {
    feature locl;
    feature case;
    feature sups;
    feature sinf;
    feature ordn;
    feature numr;
    feature dnom;
    feature frac;

    sub period by ellipsis;
    sub hyphen from [endash emdash minus];
} aalt;


#----------------------------------------------------------------------------
# Composition of accented characters

@uppercase = [A Aacute Abreve Acircumflex Adieresis Agrave Amacron Aogonek Aring Atilde AE B C Cacute Ccaron Ccedilla Cdotaccent D Eth Dcaron Dcroat E Eacute Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eogonek F G Gbreve Gcommaaccent Gdotaccent H Hbar I Iacute Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek J K Kcommaaccent L Lacute Lcaron Lcommaaccent Lslash M N Nacute Ncaron Ncommaaccent Eng Ntilde O Oacute Ocircumflex Odieresis Ograve Ohungarumlaut Omacron Oslash Otilde OE P Thorn Q R Racute Rcaron Rcommaaccent S Sacute Scaron Scedilla Scommaaccent T Tbar Tcaron Tcedilla Tcommaaccent U Uacute Ucircumflex Udieresis Ugrave Uhungarumlaut Umacron Uogonek Uring V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave Z Zacute Zcaron Zdotaccent];

feature ccmp {
    lookup ccmp_Other_1 {
        @combining_top_accents = [acutecomb brevecomb caroncomb circumflexcomb commaturnedabovecomb dieresiscomb dotaccentcomb gravecomb hungarumlautcomb macroncomb ringcomb tildecomb];
        @combining_nontop_accents = [cedillacomb ogonekcomb];
        sub [i]' @combining_top_accents by [idotless];
        sub [i]' @combining_nontop_accents @combining_top_accents by [idotless];
        @markscomb = [gravecomb acutecomb circumflexcomb caroncomb];
        @markscombCase = [gravecomb.case acutecomb.case circumflexcomb.case caroncomb.case];
        sub @uppercase @markscomb' by @markscombCase;
    } ccmp_Other_1;

    lookup ccmp_Other_2 {
        sub @markscombCase @markscomb' by @markscombCase;
    } ccmp_Other_2;
} ccmp;


#----------------------------------------------------------------------------
# Localized forms

feature locl {
    sub firsttonechinese by macroncomb;
    sub secondtonechinese by acutecomb;
    sub fourthtonechinese by gravecomb;

    script latn; # Latin
        # i -> idotaccent substitution effectively switches off the fi and ffi ligatures
        language TRK; # Turkish
            lookup LOCL_TRK {
                sub i by idotaccent;
            } LOCL_TRK;
        language AZE; # Azeri
            lookup LOCL_TRK;
        language CRT; # Crimean Tatar
            lookup LOCL_TRK;
        language KAZ; # Kazakh
            lookup LOCL_TRK;
        language TAT; # Tatar
            lookup LOCL_TRK;

        # handling of S and T with commaaccent
        language ROM; # Romanian
            lookup LOCL_ROM {
                sub Scedilla by Scommaaccent;
                sub scedilla by scommaaccent;
                sub Tcedilla by Tcommaaccent;
                sub tcedilla by tcommaaccent;
            } LOCL_ROM;
        language MOL; # Moldavian
            lookup LOCL_ROM;

        # Catalan dot
        language CAT; # Catalan
            sub l periodcentered' l by periodcentered.CAT;
            sub L periodcentered' L by periodcentered.CAT.case;

        # Dutch ij and ij with acute
        # some overlap with ccmp as ccmp gets removed from Latin-only version
        language NLD; # Dutch
            lookup LOCL_DUTCHIJ_DECOMPOSE {
                sub ij by i j;
                sub IJ by I J;  
            } LOCL_DUTCHIJ_DECOMPOSE;
            lookup LOCL_DUTCHJACUTE {
                sub i' j acutecomb by iacute;
                sub I' J acutecomb by Iacute;
                sub iacute j' acutecomb' by jacute;
                sub Iacute J' acutecomb' by Jacute;
                sub iacute j' by jacute;
                sub Iacute J' by Jacute;
            } LOCL_DUTCHJACUTE;
            lookup LOCL_DUTCHIJACUTE_COMPOSE {
                sub ij acutecomb by iacute_j.NLD;
                sub IJ acutecomb by Iacute_J.NLD;
                sub i j acutecomb by iacute_j.NLD;
                sub I J acutecomb by Iacute_J.NLD;
            } LOCL_DUTCHIJACUTE_COMPOSE;
        language VIT;
            sub circumflexcomb acutecomb by circumflexacutecomb;
            sub circumflexcomb gravecomb by circumflexgravecomb;
            sub circumflexcomb hookabovecomb by circumflexhookabovecomb;
            sub circumflexcomb tildecomb by circumflextildecomb;

    script cyrl;
        language SRB; # Serbian
            lookup LOCL_SRB {
                sub c.be by c.be.SRB;
            } LOCL_SRB;
        language MKD; # Moldavian
            lookup LOCL_SRB;
        language BGR; # Bulgarian
            lookup LOCL_BGR {
                sub c.De by c.De.BGR;
                sub c.El by c.El.BGR;
                sub c.ve by c.ve.BGR;
                sub c.ghe by c.ghe.BGR;
                sub c.de by c.de.BGR;
                sub c.zhe by c.zhe.BGR;
                sub c.ze by c.ze.BGR;
                sub c.i by c.i.BGR;
                sub c.ishort by c.ishort.BGR;
                sub c.igrave by c.igrave.BGR;
                sub c.ka by c.ka.BGR;
                sub c.el by c.el.BGR;
                sub c.pe by c.pe.BGR;
                sub c.te by c.te.BGR;
                sub c.tse by c.tse.BGR;
                sub c.sha by c.sha.BGR;
                sub c.shcha by c.shcha.BGR;
                sub c.yu by c.yu.BGR;
            } LOCL_BGR;
} locl;



#----------------------------------------------------------------------------
# Case-sensitive forms

@BRACKETS = [parenleft parenright bracketleft bracketright braceleft braceright angledbracketleft angledbracketright bar brokenbar];

@hyphens = [hyphen softhyphen hyphentwo nonbreakinghyphen hyphen.case];

@grUppercaseTonos = [Alphatonos Epsilontonos Etatonos Iotatonos Omicrontonos Upsilontonos Omegatonos];

@grUppercaseNoTonos = [Alpha Epsilon Eta Iota Omicron Upsilon Omega];

feature case {
    sub questiondown by questiondown.case;
    sub exclamdown by exclamdown.case;
    sub at by at.case;
    sub @hyphens by hyphen.case;
    sub colon by colon.case;
    sub endash by endash.case;
    sub emdash by emdash.case;
    sub guilsinglleft by guilsinglleft.case;
    sub guilsinglright by guilsinglright.case;
    sub guillemetleft by guillemetleft.case;
    sub guillemetright by guillemetright.case;
    sub circumflexcomb by circumflexcomb.case;
    sub caroncomb by caroncomb.case;
    sub brevecomb by brevecomb.case;
    sub acutecomb by acutecomb.case;
    sub gravecomb by gravecomb.case;
    sub circumflextildecomb by circumflextildecomb.case;
    sub circumflexgravecomb by circumflexgravecomb.case;
    sub circumflexhookabovecomb by circumflexhookabovecomb.case;
    sub circumflexacutecomb by circumflexacutecomb.case;
    sub bulletoperator by bulletoperator.case;
    sub periodcentered.CAT by periodcentered.CAT.case;
    sub tonoscomb by tonoscomb.case;

    # Greek

    # a fix for monotonic and polytonic orthography in all-cap setting
    # add dialytika after letters with tonos, varia, or oxia
    sub @grUppercaseTonos [Upsilon Iota]' by [Upsilondieresis Iotadieresis];    
    # remove accents in all-cap setting
    sub @grUppercaseTonos by @grUppercaseNoTonos;

    # shift some punctuation
    pos bullet <0 60 0 0>;
    pos @BRACKETS <0 60 0 0>;

    # German Eszett
    # to fix apps which do not support the new orthography yet

    sub germandbls by Germandbls;
} case;


#----------------------------------------------------------------------------
# Superiors & inferiors

feature sups {
    lookup SUPS {
        sub zero by zerosuperior;
        sub one by onesuperior;
        sub two by twosuperior;
        sub three by threesuperior;
        sub four by foursuperior;
        sub five by fivesuperior;
        sub six by sixsuperior;
        sub seven by sevensuperior;
        sub eight by eightsuperior;
        sub nine by ninesuperior;
    } SUPS;
} sups;

feature sinf {
    lookup SINF {
        sub zero by zerosuperior;
        sub one by onesuperior;
        sub two by twosuperior;
        sub three by threesuperior;
        sub four by foursuperior;
        sub five by fivesuperior;
        sub six by sixsuperior;
        sub seven by sevensuperior;
        sub eight by eightsuperior;
        sub nine by ninesuperior;
    } SINF;
} sinf;


#----------------------------------------------------------------------------
# Ordinals

@ordn_from = [a o];
@ordn_to = [ordfeminine ordmasculine];

feature ordn {
    sub [zero one two three four five six seven eight nine] @ordn_from' by @ordn_to;
    sub @ordn_to @ordn_from' by @ordn_to;
} ordn;


#----------------------------------------------------------------------------
# Numerators

feature numr {
    lookup SUPS;
} numr;


#----------------------------------------------------------------------------
# Denominators

feature dnom {
    lookup SINF;
} dnom;


#----------------------------------------------------------------------------
# Fractions

feature frac {
    @numerators = [zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior];

    @denominators = [zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior];

    @figures = [zero one two three four five six seven eight nine];

    lookup percent {
    sub zero [slash fraction divisionslash] zero by percent;
    sub zero [slash fraction divisionslash] zero zero by perthousand;
    } percent;
    lookup FractionBar {
         ignore sub slash
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             @figures
             slash';
         ignore sub slash'
             @figures
             @figures
             slash;
         ignore sub slash
             @figures
             slash';
         ignore sub slash'
             @figures
             slash;
         sub @figures slash' @figures by fraction;
    } FractionBar;

    lookup Numerator1 {
         sub @figures'
         fraction by @numerators;
    } Numerator1;

    lookup Denominator {
         sub [fraction @denominators]
         @figures' by @denominators;
    } Denominator;

    sub @figures space' @numerators by thinspace;

    # Vulgar fractions
    sub onesuperior fraction nineinferior by onehalf;
    sub onesuperior fraction threeinferior by onethird;
    sub twosuperior fraction threeinferior by twothirds;
    sub onesuperior fraction fourinferior by onequarter;
    sub threesuperior fraction fourinferior by threequarters;
    sub onesuperior fraction fiveinferior by onefifth;
    sub twosuperior fraction fiveinferior by twofifths;
    sub threesuperior fraction fiveinferior by threefifths;
    sub foursuperior fraction fiveinferior by fourfifths;
    sub onesuperior fraction sixinferior by onesixth;
    sub fivesuperior fraction sixinferior by fivesixths;
    sub onesuperior fraction seveninferior by oneseventh;
    sub twosuperior fraction seveninferior by twosevenths;
    sub threesuperior fraction seveninferior by threesevenths;
    sub foursuperior fraction seveninferior by foursevenths;
    sub fivesuperior fraction seveninferior by fivesevenths;
    sub sixsuperior fraction seveninferior by sixsevenths;
    sub onesuperior fraction eightinferior by oneeighth;
    sub threesuperior fraction eightinferior by threeeighths;
    sub fivesuperior fraction eightinferior by fiveeighths;
    sub sevensuperior fraction eightinferior by seveneighths;
    sub onesuperior fraction nineinferior by oneninth;
    sub twosuperior fraction nineinferior by twoninths;
    sub foursuperior fraction nineinferior by fourninths;
    sub fivesuperior fraction nineinferior by fiveninths;
    sub sevensuperior fraction nineinferior by sevenninths;
    sub eightsuperior fraction nineinferior by eightninths;
} frac;



#----------------------------------------------------------------------------
# Ligatures

feature liga {
    sub idieresis idieresis by idieresis_idieresis;
} liga;



#----------------------------------------------------------------------------
# Discretionary ligatures

feature dlig {
    lookup ANIMALS {
        sub colon c a t colon by cat;
        sub colon c a t b l a c k colon by cat.black;
        sub colon c a t r i g h t colon by cat.right;
        sub colon c a t b l a c k r i g h t colon by cat.black.right;
        sub colon d o g colon by dog;
        sub colon d o g b l a c k colon by dog.black;
        sub colon d o g r i g h t colon by dog.right;
        sub colon d o g b l a c k r i g h t colon by dog.black.right;
        sub colon o w l colon by owl;
        sub colon o w l b l a c k colon by owl.black;

        sub lozenge [bar slash] by lozenge.pica;
    } ANIMALS;
    lookup KASHIDOG {
        sub dog.body' [space underscore] by dog.butt;
        sub [dog.head dog.body] colon' by dog.body;
        sub dog' colon by dog.head;
    } KASHIDOG;
} dlig;

feature ss01 {
    lookup ANIMALS;
    lookup KASHIDOG;
} ss01;

feature ss02 {
    # make them long, make them tall, make them fly
    sub dog by dog.head dog.body dog.butt;
    sub dog.black by dog.black.head dog.black.body dog.black.butt;
    sub owl by owl.flying;
    sub owl.black by owl.black.flying;
} ss02;

